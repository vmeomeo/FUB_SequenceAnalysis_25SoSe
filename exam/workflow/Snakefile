import os
from pathlib import Path
import pandas as pd

# load samples into table

# configfile : "./config/config.yaml"
configfile: "config/config.yaml"
samples = pd.read_csv(config["samples"], index_col = "sample", sep ='\t') # choose set 1 or 2 here

def get_included_samples():

    all_samples = samples.index.tolist()
    blacklist_file = config.get("blacklist_file", None)

    if blacklist_file:
        try:
            blacklist = pd.read_csv(blacklist_file, header=None)[0].tolist()
        except Exception:
            print("Warning: Could not read blacklist file. Using all samples.")
            blacklist = []
    else:
        blacklist = []

    return [s for s in all_samples if s not in blacklist]

set1 = bool(config["samples"] == "config/samples_set1.tsv")

def get_preprocessed_reads(sample):
    suffix = "decontaminated" if config.get("contaminant_fasta", "") else "cleaned"
    extension = "fastq" if config.get("contaminant_fasta", "") else "fastq.gz"
    # Return the paths for the preprocessed reads
    return [
        f"{config['output_dir_path']}/{suffix}/{sample}_r1.{extension}",
        f"{config['output_dir_path']}/{suffix}/{sample}_r2.{extension}"
    ]
# Conditional final outputs
final_output = []
if set1: #TESTED UNTIL PLASMIDFINDER
    final_output.append(f"{config['output_dir_path']}/qc/multiqc_report.html")
    final_output.extend(expand(f"{config['output_dir_path']}/assembly/{{sample}}/{{sample}}.fasta", sample=get_included_samples()))
    final_output.append(f"{config['output_dir_path']}/qc/multiqc_assembly_report.html") #multiqc on assembly (quast+busco)
    final_output.append(f"{config['output_dir_path']}/pangenome/panaroo")
    # Optionally add Bakta DB download target if enabled
    if config.get("bakta_db_download", False):
        final_output.append(config["bakta_db_path"])  # ensure bakta_db_path exists in config.yaml


    # Optionally add BUSCO DB download target
    if config.get("busco_db_download", False):
        final_output.append(f"{config['busco_db_path']}/.downloaded")
    
    final_output.extend([get_preprocessed_reads(sample) for sample in get_included_samples()])
    final_output.append(f"{config['output_dir_path']}/phylogeny/panaroo_tree.png")

    # final aggregate of optional reports
    final_output.append(f"{config['output_dir_path']}/summary/combined_report.xlsx")

else: #UNTESTED YET, NEED TO MODIFY THE RULES TO TEST
    # Basic QC outputs 
    final_output.append(f"{config['output_dir_path']}/qc/multiqc_report.html")
    
    # Assembly outputs 
    final_output.extend(expand(f"{config['output_dir_path']}/assembly/{{sample}}/{{sample}}.fasta", 
                            sample=get_included_samples()))
    final_output.append(f"{config['output_dir_path']}/qc/multiqc_assembly_report.html")
    
    # Keep pangenome and phylogeny
    final_output.append(f"{config['output_dir_path']}/pangenome/panaroo")
    final_output.append(f"{config['output_dir_path']}/phylogeny/panaroo_tree.png")
    
    # Preprocessed reads
    final_output.extend([get_preprocessed_reads(sample) for sample in get_included_samples()])
    
    # Final report
    final_output.append(f"{config['output_dir_path']}/summary/combined_report.xlsx")


rule all:
    input:
        *final_output

include: "rules/qc.smk"
include: "rules/unicycler.smk"
include: "rules/bakta.smk"
include: "rules/assembly_qc.smk"
include: "rules/panaroo.smk"
include: "rules/screen_all.smk"
include: "rules/decontamination.smk"
include: "rules/iqtree_vis.smk"
include: "rules/optional.smk"