import os
from pathlib import Path
import pandas as pd

configfile: "./config/config.yaml"

samples = pd.read_csv(config["samples"], index_col="sample", sep='\t')

def get_preprocessed_reads(sample):
    suffix = "decontaminated" if config.get("contaminant_fasta", "") else "cleaned"
    return [
        f"{config['output_dir_path']}/{suffix}/{sample}_1.fastq",
        f"{config['output_dir_path']}/{suffix}/{sample}_2.fastq"
    ]

polishing_outputs = expand(
    f"{config['output_dir_path']}/polishing/{{sample}}_polished.fasta",
    sample=samples.index
) if config.get("enable_polishing", False) else expand(
    f"{config['output_dir_path']}/assembly/{{sample}}/contigs.fasta",
    sample=samples.index
)

rule all:
    input:
        expand(
            f"{config['output_dir_path']}/cleaned/{{sample}}_{{read_number}}.fastq",
            sample=samples.index,
            read_number=["1", "2"]
        ),
        *[get_preprocessed_reads(sample) for sample in samples.index],
        polishing_outputs,
        f"{config['output_dir_path']}/phylogeny/all_samples.tree.png",
        f"{config['output_dir_path']}/qc/multiqc_report.html",
        f"{config['output_dir_path']}/variability/all_samples_windows_var.txt",
        f"{config['output_dir_path']}/all_samples/all_samples_final.fasta"


include: "rules/fastp.smk"
include: "rules/spades.smk"
include: "rules/quast.smk"
include: "rules/normalize_reads.smk"
include: "rules/assembly_utils.smk" 
include: "rules/screen_all.smk"   
include: "rules/mafft.smk"
include: "rules/iqtree_vis.smk"
include: "rules/var.smk"
include: "rules/multiqc.smk"
include: "rules/polishing.smk"
include: "rules/decontamination.smk"
include: "rules/map_consensus_patch.smk"
